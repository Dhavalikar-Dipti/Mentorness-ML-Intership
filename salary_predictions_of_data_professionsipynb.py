# -*- coding: utf-8 -*-
"""Salary Predictions of Data Professionsipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NrzQkMaWL6PvXjoA1MshKqo7bqTgKgeA

**Problem Statement**


---

Salaries in the field of data professions vary widely based on factors such as experience, job role, and
performance. Accurately predicting salaries for data professionals is essential for both job seekers and
employers.

*1.Exploratory Data Analysis (EDA)*
"""

#import the necessary libraries
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

#load the dataset
df = pd.read_csv('/content/Salary Prediction of Data Professions.csv')

#get the dimensions of the data
df.shape

#display first few rows
df.head()

#summary
df.info()

#get the summary statistics
df.describe()

#visualize the data
sns.histplot(df['SALARY'])
plt.title("Salary Distribution")
plt.xlabel('Salary')
plt.ylabel('Count')
plt.show()

sns.pairplot(df)
plt.show()

"""
*2. Feature Engineering*"""

#for that we need to convert the "DOJ" & "CURRENT DATE" into date format
df['DOJ']=pd.to_datetime(df['DOJ'])
df['CURRENT DATE']=pd.to_datetime(df['CURRENT DATE'])

#Calculating the tenure aat current job
df['TENURE'] = (df['CURRENT DATE']-df['DOJ']).dt.days/365
df['TENURE'] = df['TENURE'].round(1)
df.head()

#Calculating total experiance
df['TOTAL EXP'] = df['TENURE'] + df['PAST EXP']
df.head()

#dividing the dataset as "SENIOR" AND "JUNIOR" based on years of experiance
df['EXP LEVEL'] = df['TOTAL EXP'].apply(lambda x: 'SENIOR' if x>=5 else 'JUNIOR')

"""*3. Data Preprocessing*"""

#Checking for missing value
df.isnull().sum()

#filling the missing values
df = df.fillna(method='ffill')

#Label Encoding
from sklearn.preprocessing import LabelEncoder

le = LabelEncoder()
df['DESIGNATION'] = le.fit_transform(df['DESIGNATION'])
df['UNIT'] = le.fit_transform(df['UNIT'])
df['EXP LEVEL'] = le.fit_transform(df['EXP LEVEL'])

"""*4. Machine Learning Model Development*"""

#Split the Dataset
from sklearn.model_selection import train_test_split

x = df.drop(['SALARY','FIRST NAME','LAST NAME','SEX','DOJ','CURRENT DATE'],axis=1)
y = df['SALARY']
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=2)

#Training the data on different models
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.ensemble import GradientBoostingRegressor

#Linear Regression
lr = LinearRegression()
lr.fit(x_train,y_train)

#Desicion tree
dt = DecisionTreeRegressor()
dt.fit(x_train,y_train)

#Random Forest
rf = RandomForestRegressor()
rf.fit(x_train,y_train)

#gradient boosting
gb = GradientBoostingRegressor()
gb.fit(x_train,y_train)

"""*5. Model Evaluation*"""

#Evaluating the performance of the model metrics like Mean Absolute Error (MAE),
#Mean Squared Error (MSE), Root Mean Squared Error (RMSE), and R-squared (R2) score.
from sklearn.metrics import mean_absolute_error,mean_squared_error,r2_score

def evaluate(model,x_test,y_test):
  preds = model.predict(x_test)
  mae = mean_absolute_error(y_test,preds)
  mse = mean_squared_error(y_test,preds)
  rmse = np.sqrt(mse)
  r2 = r2_score(y_test,preds)
  print("MAE: ",mae )
  print("MSE: ",mse)
  print("RMSE: ",rmse)
  print("R2: ",r2,"\n")

print("Linear Regression:")
evaluate(lr,x_test,y_test)

print("Decision Tree:")
evaluate(dt,x_test,y_test)

print("Random Forest:")
evaluate(rf,x_test,y_test)

print("Gradient Boosting:")
evaluate(gb,x_test,y_test)

"""*6.Model Deployment*

*Creating a sample input*
"""

sample_input = {
    'DESIGNATION': ['Analyst'],
    'AGE': [30],
    'UNIT': ['IT'],
    'LEAVES USED': [15],
    'LEAVES REMAINING': [10],
    'RATINGS': [4.5] ,
    'PAST EXP': [3],
    'TENURE': [2],
    'TOTAL EXP': [5],
    'EXP LEVEL': ['SENIOR'],
}

# Convert sample input to DataFrame
sample_df = pd.DataFrame(sample_input)

# Label Encoding
sample_df['DESIGNATION'] = le.fit_transform(sample_df['DESIGNATION'])
sample_df['UNIT'] = le.fit_transform(sample_df['UNIT'])
sample_df['EXP LEVEL'] = le.fit_transform(sample_df['EXP LEVEL'])

pred_salary = rf.predict(sample_df)
print("Predicted Salary:", pred_salary[0])

"""*7. Recommendations*"""

#analyze feature importances
feature_importance = pd.Series(rf.feature_importances_, index=x.columns).sort_values(ascending=False)
print("Feature Importances:")
print(feature_importance)

recommendations = """
1.Employees should focus on gaining diverse and extensive experience in their field. Longer tenure and total experience significantly contribute to higher salaries.
2.Employees should focus on acquiring skills and expertise in high-demand areas within data professions, such as machine learning, AI, and big data analytics.
3.High performance ratings are often correlated with higher salaries.
"""

print(recommendations)